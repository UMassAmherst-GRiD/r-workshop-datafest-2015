Intro to Missing Data Techniques
========================================================
author: Kate Aloisio  
date: 3/17/2015

What is missing data?
========================================================

- May be due to design or happenstance
- Ignoring missing data may lead to inefficiency 
- Ignoring missing data may lead to bias
- Important to identify possible selection or biasing issues comparing subjects with missing data with complete data subjects

Types of missing data
========================================================

- Missingness does not depend on observed or unobserved covariates (data fell from the truck)

- Missingness does not depend on unobserved covariates (a subject was hospitalized for high cholesterol)

- Missingness depends on unobserved quantities (a subject missed their appointment because they were too sick to get out of bed)

Missing values in R
========================================================
- Denoted NA; Logical constant of length 1 which contains a missing value indicator
```{r}
NA
class(NA)
NA > 1 
```
Missing values in R (cont)
==========================================================
- Reserved word in R
```{r, error=TRUE}
NA <- 5
```

Testing for Missing Values
========================================
```{r}
x <- c(1, 2, 9, NA)
y <- c("k", "A", NA, "NA")
is.na(x)
```
What do you think this will return?
```{r, eval=FALSE}
is.na(y)
```

Testing for Missing Values
========================================
```{r}
x <- c(1, 2, 9, NA)
y <- c("k", "A", NA, "NA")
is.na(x)
is.na(y)
```
Recoding Values to Missing
========================================
```{r}
x <- c(1, 2, 9, NA)
y <- c("k", "A", NA, "NA")
ds <- as.data.frame(cbind(x, y))
ds
```
Recoding Values to Missing (cont)
========================================
Let's replace the character "NA" with the symbol NA
```{r}
ds$y[ds$y=="NA"] <- NA
ds
```

Excluding Missing Values from Analysis
========================================
```{r}
x <- c(1, 2, 9, NA)
mean(x)
x[x != NA] # returns all NA
x[!is.na(x)]
mean(x[!is.na(x)]) # subset to remove NA
mean(x, na.rm=TRUE) # use arguments to remove NA
```

Complete Case 
========================================
```{r}
ds
ds[!complete.cases(ds),] # returns cases with missing values
ds[complete.cases(ds),] # returns only complete cases
```

NA options in R
==========================================
```{r}
na.omit(ds)
mean(na.omit(ds$x)) # use NA options
na.exclude(ds) # can be different in some prediction and residual functions
na.pass(ds) # returns the object unchanged
```

NA options (cont.)
==========================================
```{r}
# na.fail(ds) # returns the object only if it contains no missing values
```

Advanced Methods
========================================
Imputation
```{r}
```



***
NULL
- Represents a null object
- Returned by expressions and functions whose values are undefined
- Reserved word
- Not allowed in a vector


Examples NA vs NULL
========================================================
```{r}
NA
class(NA)
NA > 1
# NA <- 5
```
***
```{r}
NULL
class(NULL)
NULL > 1
# NULL <- 5
v <- c(1, NA, NULL)
v
```

Caution using NULL
========================================
```{r}
x <- c(1, 2, 9, NA)
y <- c("k", "A", NA, "NA")
ds <- as.data.frame(cbind(x, y))
ds
ds$x <- NULL
ds
```




