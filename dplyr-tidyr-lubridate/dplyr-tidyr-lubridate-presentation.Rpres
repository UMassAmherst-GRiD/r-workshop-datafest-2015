Organizing your data with dplyr, tidyr, and lubridate
========================================================
author: Stephen Lauer
date: 3/10/2015

Data Manipulation
========================================================
- Looking at all your data at once is often impossible or confusing. We may only want to look at a part of our data
- In this presentation I will walk you through the packages dplyr, tidyr, and lubridate to help you format your data exactly as you like it
- You can find cheatsheets for dplyr and tidyr at www.rstudio.com/resources/cheatsheets

dplyr - select()
========================================================

To view the columns of your choosing, use select(). Can choose by column name:

```{r}
install.packages("dplyr")
library(dplyr)
data("iris")
View(iris)
select(iris,
       Petal.Width,
       Species)
```

dplyr - select()
========================================================

Column number:

```{r}
select(iris, 1:3)
```

dplyr - select()
========================================================

Not certain columns:

```{r}
select(iris,
       -Species,
       -Sepal.Width)
```

dplyr - select()
========================================================

Columns starting with a name:

```{r}
select(iris, starts_with("Sepal"))
```

dplyr - rename()
========================================================

Sometimes a variable name is confusing, so we should rename() it:

```{r}
rename(iris,
       Leaf_L = Sepal.Length,
       Leaf_W = Sepal.Width)
```

dplyr - rename()/select()
========================================================

We can also do this with select():

```{r}
select(iris,
       Leaf_L = Sepal.Length,
       Leaf_W = Sepal.Width)
```

dplyr - filter()
========================================================

Often, you only want to look at observations with particular parameters, for this you can use filter():

```{r}
iris2 <- select(iris, starts_with("Petal"), Species)
filter(iris2, Species == "virginica")
```

dplyr - filter()
========================================================

You can use the >, <, ==, >=, and <= operators to filter() rows:

```{r}
filter(iris2,
       Petal.Length > 4,
       Petal.Width <=1.2)
```

dplyr - arrange()
========================================================

To sort by a variable, use arrange():

```{r}
arrange(iris2, Petal.Length)
```

dplyr - arrange()
========================================================

Use desc() to arrange() descendingly:

```{r}
arrange(iris2, desc(Petal.Length))
```

dplyr - arrange()
========================================================

Can arrange() by multiple variables to account for ties:

```{r}
arrange(iris2,
        desc(Petal.Length),
        desc(Petal.Width))
```

dplyr - %>%
========================================================

To use multiple functions in a row, use the %>% ("pipeline"):

```{r}
iris %>%
    select(starts_with("Sepal"), Species) %>%
    filter(Sepal.Length >= 6) %>%
    arrange(desc(Sepal.Width))

arrange(filter(select(iris, starts_with("Sepal"), Species), Sepal.Length >=6), desc(Sepal.Width))
```

dplyr - mutate()
========================================================

To create a new variable for your dataset, use mutate():

```{r}
mutate(iris2, Add3 = Petal.Length + 3)
```

dplyr - mutate()
========================================================

```{r}
mutate(iris2, Area = Petal.Length*Petal.Width) %>% 
    arrange(desc(Area))
```

dplyr - summarise()/summarize()
========================================================

To create summary statistics of the entire dataset, use summarise():

```{r}
dplyr::summarize()
summarise(iris,
          total.flowers = n(),
          avg.P.Length = mean(Petal.Length),
          sd.P.Width = sd(Petal.Width))
```

dplyr - group_by()/summarise()
========================================================

Use group_by() along with summarise() to find summary statistics by group:

```{r}
iris %>%
    group_by(Species) %>%
    summarise(total.flowers = n(),
              avg.P.L = mean(Petal.Length))
```

dplyr - group_by()/mutate()
========================================================

Use group_by() along with mutate() to find running stats by group:

```{r}
iris %>%
    sample_n(6) %>%
    select(Petal.Length, Species) %>%
    group_by(Species) %>%
    mutate(cumsum(Petal.Length))
```

dplyr - combining datasets
========================================================

Sometimes you have two datasets that you want to merge, such as "a"...

```{r}
a_df <- data_frame(x1 = c("A", "B", "C"),
                x2 = c(1,2,3))
a_df
```

dplyr - combining datasets
========================================================

and "b".

```{r}
b_df <- data_frame(x1 = c("A", "B", "D"),
                x3 = c(T,F,T))
b_df
```

dplyr - left_join()
========================================================

left_join() keeps everything in "a" and only matching values in "b".

```{r}
left_join(a_df,b_df)
```

dplyr - right_join()
========================================================

right_join() keeps everything in "b" and only matching values in "a".

```{r}
right_join(a_df,b_df)
```

dplyr - inner_join()
========================================================

inner_join() keeps everything that matches in "a" and "b".

```{r}
inner_join(a_df,b_df)
```

dplyr - full_join()
========================================================

full_join() keeps everything in "a" and "b".

```{r}
full_join(a_df,b_df) %>% 
    arrange(desc(x2)) -> full_join_df
full_join <- 
anti_join(a_df,b_df)
anti_join(b_df,a_df)
```

tidyr - gather()
========================================================

If your variables are measured by common units, then it may make sense to make one column for variable name and another for the metric. For this we use gather() from the tidyr package:

```{r}
install.packages("tidyr")
library(tidyr)
gather(iris, "measure", "cm", 1:4)
```

tidyr - spread()
========================================================

To undo this, use spread() [each row must be unique for this to work]:

```{r}
gatherd_iris <- iris %>%
    mutate(id = seq(1,150)) %>%
    gather("measure", "cm", 1:4)
spread(gatherd_iris, measure, cm) %>%
    select(id, Species, starts_with("Sepal"))
```

lubridate
========================================================

- Dates have many different formats
- 2015-03-10 = 3/10/15 = March 10th, 2015
- When working with data, you want to ensure that all of your dates are in the same format
- The lubridate package can help with this


lubridate
========================================================

In order to set the date into a common format (Called "POSIXt"), you merely need to specify the order:

```{r}
install.packages("lubridate")
library(lubridate)
now_a_date <- ymd("2015-03-10")
mdy("3/10/15")
mdy("March 10th, 2015")

```

lubridate
========================================================

Every conceivable order of "ymd" is available:

```{r}
dmy("The 10th of March in 2015")
ydm("2015+10+3")
myd("Mar~15~10")
```

lubridate
========================================================

now() outputs the current time. You can extract many date-related features from a POSIXt object:

```{r}
now()
week(now()) ## week of year
yday(now()) ## day of year
```
